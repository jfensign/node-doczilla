<% include header %>
    
<div>
<h1>Around Me (Shopping Malls)</h1>
<div class="span12" style="height: 400px;" id="map_div"></div>
<ul style="float: left; display: block; width: 400px;" id="list"></ul>
</div>

<script type="text/javascript">

function gMapsGeo(mapObj) {
  //map object
  this.map = mapObj;
  this.markers = [];
  this.customMarkers = [];
  this.webMarkers = [];
  this.customMarkersStore = [];
  this.infoWindows = [];
  this.clusters = [];
  this.Circle;
  this.Instance;
  this.userMarker;
  this.Drawer;
  this.origin;
  this.You;
  
  
  if (arguments.callee._singletonInstance) {
   return arguments.callee._singletonInstance;
  }
  else {
   arguments.callee._singletonInstance = this;
   this.Instance = arguments.callee._singletonInstance;
  }
  
this.Instance.geoCode = function(address, callback) {
  this.geoHandle.geocode({'address' : address}, function(data, status) {
    if(status == "OK") {
		mapObj.setCenter(data[0].geometry.location);
		this.origin = data[0].geometry.location;
		callback(data);
	}
  });
}

this.Instance.setYou = function(loc, Icon, callback) {
 this.Instance.You = new google.maps.Marker({
  map: this.Instance.map,
  position: loc
 });
	
 this.Instance.You.setAnimation(
  google.maps.Animation.DROP
 );
	
 if(Icon) {
  this.Instance.You.setIcon(Icon);
 }

 callback(this.Instance.You);
}

this.Instance.clearMarkers = function() {
 for(var i=0;i < this.markers.length;i++) {
	this.markers[i].setMap(null);
 }
};

this.Instance.setMapCenter = function(loc) {
  this.map.setCenter(loc);
};

this.Instance.clearCustomMarkers = function() {
  for(var i=0;i<this.customMarkers.length;i++) {
    this.customMarkers[i].setMap(null);
  }
};

this.Instance.destroyCustomMarkers = function() {
  for(var i=0;i<this.customMarkers.length;i++) {
    this.customMarkers[i].setMap(null);
	  this.customMarkers.pop();
  }
  
  this.customMarkers = [];
};

this.Instance.getUserMarker = function() {
  return this.Instance.userMarker;
};

this.Instance.setCenter = function(lat, lng) {
  var center = new google.maps.LatLng(
    parseFloat(lat), 
	  parseFloat(lng)
  );
  this.Circle.bindTo('center', center, 'position');
  this.map.setCenter(center);
};

this.Instance.drawCircle = function(radius) {

  this.Circle = new google.maps.Circle({
		map: this.map,
		radius: radius,
		fillColor: '#e5e5e5'
	});
	this.Circle.bindTo('center', this.Instance.You, 'position');
};

this.Instance.setRadius = function(val) {
  //this.drawCircle(val);
  this.Circle.setRadius(val);
};

this.Instance.distanceBetweenPoints = function(latlng1, latlng2) {
  return (
   (google.maps.geometry.spherical.computeDistanceBetween(latlng1, latlng2) * 0.000621371192237334)
  );
};

this.Instance.showMarkers = function(markerArray) {
  for(var i=0;i<markerArray.length;i++) {
    markerArray[i].setMap(this.map);
  }
};

this.Instance.setCluster = function(clusterArray) {
  $.each(clusterArray, function(key, val) {
    console.log(val);
  });
};

this.Instance.hideMarkers = function(markerArray) {
  for(var i=0;i<markerArray.length;i++) {
    markerArray[i].setMap(null);
  }
};

this.Instance.setMarker = function(markerArray, position, Icon) {
  var Map = this.Instance.map;
  var infoWindows = this.Instance.infoWindows;
  var Marker = new google.maps.Marker({
	  map: Map,
	  position: position,
    draggable: true
  });
	
  Marker.setAnimation(
	 google.maps.Animation.DROP
	);
	
	if(Icon) {
	 Marker.setIcon(
	  Icon
	 );
	}

  Marker.setDraggable(true);
  markerArray.push(Marker);
};

this.Instance.setCustomMarker = function(position, Icon, callback) {
  var Markers = this.Instance.customMarkers;
  
  var Map = this.Instance.map;
  var infoWindows = this.Instance.infoWindows;
  var Marker = new google.maps.Marker({
	  map: Map,
	  position: position,
    draggable: true
  });
	
  Marker.setAnimation(
	 google.maps.Animation.DROP
	);

  if(Icon) {
	 Marker.setIcon(
	  Icon
	 );
  }
  if(!callback) {
   this.Instance.customMarkers.push(Marker);
  }
  else {
   callback(Marker);
  }
};

this.Instance.clearClusters = function() {
 this.Instance.clusters.setMap(null);
};

this.Instance.showClusters = function() {
 this.Instance.clusters.setMap(this.Instance.map);
};

this.Instance.clusterCustomMarkers = function() {
 this.Instance.clusters = new MarkerClusterer(
  this.Instance.map, 
  this.customMarkers
 );
};

this.Instance.createDrawer = function() {

 this.Drawer = new google.maps.drawing.DrawingManager({
  drawingMode: google.maps.drawing.OverlayType.POLYLINE,
  drawingControl: false,
  drawingControlOptions: {
    drawingModes: [
     google.maps.drawing.OverlayType.POLYGON, 
     google.maps.drawing.OverlayType.RECTANGLE,
     google.maps.drawing.OverlayType.CIRCLE,
     google.maps.drawing.OverlayType.MARKER
    ]
  },
  polyLineOptions: {
    draggable: true,
    editable: true
  },
  circleOptions: {
    fillColor: '#ffff00',
    fillOpacity: 1,
    strokeWeight: 5,
    clickable: false,
    zIndex: 1,
    editable: true,
    draggable: true
  },
  markerOptions: {
   draggable: true
  }
});
this.Drawer.setMap(this.Instance.map);
this.Drawer.setDrawingMode(null);
};
	
this.Instance.setMarkers = function(geoCodeResponse, clear) {
  
  var Markers = this.Instance.markers;
  var Marker;
  var Map = this.Instance.map;
  var infoWindows = this.Instance.infoWindows;
  var userMarker = this.Instance.userMarker;
  var circle;
  
  $.each(geoCodeResponse, function(key, val) {
    Marker = new google.maps.Marker({
	  map: Map,
	  position: Map.getCenter(),
	  title: val.name
	});

	Marker.setAnimation(
	  google.maps.Animation.DROP
	);

  google.maps.event.addListener(Marker, 'click', function(evt) {
	
  var infoWindow = new google.maps.InfoWindow({
	 content: "<h1>You</h1>",                   
   size: new google.maps.Size(50,50),
	 position: Marker.position
	});
	
	infoWindows.push(infoWindow);
	infoWindow.open(Map);
	
  });
  Markers.push(Marker);
 });
 
 this.Instance.userMarker = Marker;
 this.Instance.markers = Markers;

}

};

</script>

 <script type="text/javascript">
$(document).ready(function() {
 try {
  if (navigator.geolocation){
   navigator.geolocation.getCurrentPosition(function(data) {
    var map;
    var mapOptions = {
     zoom: 4,
     center: new google.maps.LatLng(37.09024,-95.712891),
     mapTypeId: google.maps.MapTypeId.ROADMAP,
     panControl: true,
     mapTypeControlOptions: {
      mapTypeIds: [google.maps.MapTypeId.ROADMAP, 'map_style']
     }
    };

    map = new google.maps.Map(document.getElementById('map_div'),mapOptions);
    mapHelper=new gMapsGeo(map);
    mapHelper.setYou(
      new google.maps.LatLng(data.coords.latitude, data.coords.longitude),null, function(youMarker) {
       youMarker.setMap(mapHelper.map);
      }
    );

    $.getJSON(
     "http://localhost:3000/map/locations/malls",
     {coords:data.coords.latitude+","+data.coords.longitude},
     function(data) {
     
      $.each(data.response.docs, function(key, mall) {
      mapHelper.setCustomMarker(new google.maps.LatLng(parseFloat(mall.lng), parseFloat(mall.lat)),null, function(marker) {
       marker.setMap(mapHelper.map);
       console.log(marker)
      });

      $("#list").append($("<li />",{
       text: mall.name
      }));

      });
     }
    );

    //Button Events
    $("#overlay_polygon").click(function() {
     mapHelper.Drawer.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);
    });
    $("#overlay_rectangle").click(function() {
     mapHelper.Drawer.setDrawingMode(google.maps.drawing.OverlayType.RECTANGLE);
    });
    $("#overlay_null").click(function() {
     mapHelper.Drawer.setDrawingMode(null);
    });
    $("#map_div").click(function() {
     google.maps.event.trigger(map, 'click');
    });
    //end button events

   });
  }
  else{
   alert("Could Not Determine Your Location.");
  }
 }
 catch(Error) {
  console.log(Error);  
 }

}); //End docready

String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
}

google.maps.Polygon.prototype.getBounds = function(latLng) {
 var bounds = new google.maps.LatLngBounds();
 var paths = this.getPaths();
 var path;
 for(var p = 0; p < paths.getLength(); p++) {
  path = paths.getAt(p);
  for (var i = 0; i < path.getLength(); i++) {
   bounds.extend(path.getAt(i));
  }
 }
 return bounds;
}

google.maps.Marker.prototype.setState = function(state_coords, state_name, state_long_name) {
 this.state={
   abbreviation: state_name,
   coords: state_coords,
   name: state_long_name
 }
}

google.maps.Polygon.prototype.getArea=function(X, Y, numPoints) { 
  area = 0;         
  j = numPoints-1;  

  for (i=0; i<numPoints; i++)
    { area = area +  (X[j]+X[i]) * (Y[j]-Y[i]); 
      j = i;  
    }
  return area/2;
}


google.maps.Polygon.prototype.containsLatLng = function(latLng) {
 
  var bounds = this.getBounds();
  if(bounds != null && !bounds.contains(latLng)) {
    return false;
  }
  var inPoly = false;
  var numPaths = this.getPaths().getLength();
  for(var p = 0; p < numPaths; p++) {
    var path = this.getPaths().getAt(p);
    var numPoints = path.getLength();
    var j = numPoints-1;

    for(var i=0; i < numPoints; i++) { 
      var vertex1 = path.getAt(i);
      var vertex2 = path.getAt(j);

      if (vertex1.lng() < latLng.lng() && vertex2.lng() >= latLng.lng() || vertex2.lng() < latLng.lng() && vertex1.lng() >= latLng.lng())  {
        if (vertex1.lat() + (latLng.lng() - vertex1.lng()) / (vertex2.lng() - vertex1.lng()) * (vertex2.lat() - vertex1.lat()) < latLng.lat()) {
          inPoly = !inPoly;
        }
      }
      j = i;
    }
  }
  return inPoly;
}

$("#viewportUSA").click(function() {
  mapHelper.map.setCenter(new google.maps.LatLng(37.09024,-95.712891));
  mapHelper.map.setZoom(4);
});

function createGeoJsonMultiPolygon(geojson, stroke, fill, callback) {
    var coords = geojson.coordinates;
    var paths = [];

    $.each(coords, function (i, n) {
      $.each(n, function (j, o) {
        var path = [];
        $.each(o, function (k, p) {
          var ll = new google.maps.LatLng(p[1], p[0]);
          path.push(ll);
        });
        paths.push(path);
      });
    });

    var poly = new google.maps.Polygon({
        paths: paths,
        strokeColor: stroke,
        strokeOpacity: 1,
        strokeWeight: 1,
        fillColor: fill,
        fillOpacity: 0.25,
        clickable: true
    });

    callback(poly);
}

function createGeoJsonPolygon(geojson, stroke, fill, callback) {
    var coords = geojson.coordinates;
    var paths = [];

    $.each(coords, function (i, n) {
      var path = [];
      $.each(n, function (k, p) {
       var ll = new google.maps.LatLng(p[1], p[0]);
       path.push(ll);
      });
      paths.push(path);
    });

    var poly = new google.maps.Polygon({
        paths: paths,
        strokeColor: stroke,
        strokeOpacity: 1,
        strokeWeight: 1,
        fillColor: fill,
        fillOpacity: 0.25,
        clickable: true
    });

    callback(poly);
}

</script>

<% include footer %>
